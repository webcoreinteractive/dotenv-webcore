"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("node:path"),n=require("fs"),t=require("path"),s=require("os");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=r(e),c=r(n),a=r(t),i=r(s),p={exports:{}},l={name:"dotenv",version:"16.0.3",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{require:"./lib/main.js",types:"./lib/main.d.ts",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@types/node":"^17.0.9",decache:"^4.6.1",dtslint:"^3.7.0",sinon:"^12.0.1",standard:"^16.0.4","standard-markdown":"^7.1.0","standard-version":"^9.3.2",tap:"^15.1.6",tar:"^6.1.11",typescript:"^4.5.4"},engines:{node:">=12"}};const d=c.default,u=a.default,v=i.default,f=l.version,g=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function m(e){console.log(`[dotenv@${f}][DEBUG] ${e}`)}const y={config:function(e){let n=u.resolve(process.cwd(),".env"),t="utf8";const s=Boolean(e&&e.debug),r=Boolean(e&&e.override);var o;e&&(null!=e.path&&(n="~"===(o=e.path)[0]?u.join(v.homedir(),o.slice(1)):o),null!=e.encoding&&(t=e.encoding));try{const e=y.parse(d.readFileSync(n,{encoding:t}));return Object.keys(e).forEach((function(n){Object.prototype.hasOwnProperty.call(process.env,n)?(!0===r&&(process.env[n]=e[n]),s&&m(!0===r?`"${n}" is already defined in \`process.env\` and WAS overwritten`:`"${n}" is already defined in \`process.env\` and was NOT overwritten`)):process.env[n]=e[n]})),{parsed:e}}catch(e){return s&&m(`Failed to load ${n} ${e.message}`),{error:e}}},parse:function(e){const n={};let t,s=e.toString();for(s=s.replace(/\r\n?/gm,"\n");null!=(t=g.exec(s));){const e=t[1];let s=t[2]||"";s=s.trim();const r=s[0];s=s.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(s=s.replace(/\\n/g,"\n"),s=s.replace(/\\r/g,"\r")),n[e]=s}return n}};var b=p.exports.config=y.config,j=p.exports.parse=y.parse;p.exports=y;var h=p.exports;function x(e,n,t){const s=function(e,n){const t=Array.from(e.matchAll(n));return t.length>0?t.slice(-1)[0].index:-1}(e,/(?!(?<=\\))\$/g);if(-1===s)return e;const r=e.slice(s).match(/((?!(?<=\\))\${?([\w]+)(?::-([^}\\]*))?}?)/);if(null!=r){const[,s,o,c]=r;return x(e.replace(s,n[o]||c||t.parsed[o]||""),n,t)}return e}function w(e){return e.replace(/\\\$/g,"$")}var $=function(e){const n=e.ignoreProcessEnv?{}:process.env;for(const t in e.parsed){const s=Object.prototype.hasOwnProperty.call(n,t)?n[t]:e.parsed[t];e.parsed[t]=w(x(s,n,e))}for(const t in e.parsed)n[t]=e.parsed[t];return e};const O=/(?<content>.*)::(?<type>\w*)$/,E=o.default.resolve(process.cwd(),".env.default"),A=o.default.resolve(process.cwd(),`.env.${process.env.BASE_CONFIG_ENV||process.env.CONFIG_ENV||"development"}`),N=(e,n)=>{if(!O.test(e))return e;const{type:t,content:s}=O.exec(e).groups;switch(t){case"number":case"int":case"float":return+s;case"bool":let r;try{r=JSON.parse(s)}catch(e){}return!!r;case"json":let o;try{o=JSON.parse(s)}catch(e){}return o;case"date":return new Date(s);default:return n&&n[t]?n[t](s):e}},_=e=>{if(!e&&"object"==typeof process&&process?.env&&(e=process.env),"object"!=typeof e)return{};let n={};for(const t in e)n[t]=N(e[t]);return n},k=(e={},n={})=>{const t="object"==typeof process&&process?.env?{...process.env}:{};console.log("system envs?","object"==typeof process&&!!process?.env),console.log("has openai?",!!process?.env?.OPENAI_API_KEY);const s=$(b({path:E})),r=$(b({path:A,...e})),o={...t,...s.parsed,...r?.parsed};return console.log("combined has openai?",!!o.OPENAI_API_KEY),_(o)};var P={config:b,decrypt:h.decrypt,parse:j,expand:$,load:k,convert:N,convertall:_};exports.config=b,exports.convert=N,exports.convertall=_,exports.decrypt=h.decrypt,exports.default=P,exports.expand=$,exports.load=k,exports.parse=j;
