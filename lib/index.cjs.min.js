"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("node:path"),t=require("fs"),n=require("path"),o=require("os"),r=require("crypto");function s(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=s(e),c=s(t),i=s(n),p=s(o),l=s(r),u={exports:{}},d={name:"dotenv",version:"16.5.0",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard",pretest:"npm run lint && npm run dts-check",test:"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},homepage:"https://github.com/motdotla/dotenv#readme",funding:"https://dotenvx.com",keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@types/node":"^18.11.3",decache:"^4.6.2",sinon:"^14.0.1",standard:"^17.0.0","standard-version":"^9.5.0",tap:"^19.2.0",typescript:"^4.8.4"},engines:{node:">=12"},browser:{fs:!1}};const f=c.default,v=i.default,g=p.default,E=l.default,h=d.version,_=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function y(e){console.log(`[dotenv@${h}][DEBUG] ${e}`)}function m(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function D(e,t){let n;try{n=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}const o=n.password;if(!o){const e=new Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}const r=n.searchParams.get("environment");if(!r){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}const s=`DOTENV_VAULT_${r.toUpperCase()}`,a=e.parsed[s];if(!a){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:a,key:o}}function N(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const n of e.path)f.existsSync(n)&&(t=n.endsWith(".vault")?n:`${n}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=v.resolve(process.cwd(),".env.vault");return f.existsSync(t)?t:null}function b(e){return"~"===e[0]?v.join(g.homedir(),e.slice(1)):e}const V={configDotenv:function(e){const t=v.resolve(process.cwd(),".env");let n="utf8";const o=Boolean(e&&e.debug);e&&e.encoding?n=e.encoding:o&&y("No encoding is specified. UTF-8 is used by default");let r,s=[t];if(e&&e.path)if(Array.isArray(e.path)){s=[];for(const t of e.path)s.push(b(t))}else s=[b(e.path)];const a={};for(const t of s)try{const o=V.parse(f.readFileSync(t,{encoding:n}));V.populate(a,o,e)}catch(e){o&&y(`Failed to load ${t} ${e.message}`),r=e}let c=process.env;return e&&null!=e.processEnv&&(c=e.processEnv),V.populate(c,a,e),r?{parsed:a,error:r}:{parsed:a}},_configVault:function(e){Boolean(e&&e.debug)&&y("Loading env from encrypted .env.vault");const t=V._parseVault(e);let n=process.env;return e&&null!=e.processEnv&&(n=e.processEnv),V.populate(n,t,e),{parsed:t}},_parseVault:function(e){const t=N(e),n=V.configDotenv({path:t});if(!n.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw e.code="MISSING_DATA",e}const o=m(e).split(","),r=o.length;let s;for(let e=0;e<r;e++)try{const t=D(n,o[e].trim());s=V.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=r)throw t}return V.parse(s)},config:function(e){if(0===m(e).length)return V.configDotenv(e);const t=N(e);return t?V._configVault(e):(n=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${h}][WARN] ${n}`),V.configDotenv(e));var n},decrypt:function(e,t){const n=Buffer.from(t.slice(-64),"hex");let o=Buffer.from(e,"base64");const r=o.subarray(0,12),s=o.subarray(-16);o=o.subarray(12,-16);try{const e=E.createDecipheriv("aes-256-gcm",n,r);return e.setAuthTag(s),`${e.update(o)}${e.final()}`}catch(e){const t=e instanceof RangeError,n="Invalid key length"===e.message,o="Unsupported state or unable to authenticate data"===e.message;if(t||n){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(o){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw e}},parse:function(e){const t={};let n,o=e.toString();for(o=o.replace(/\r\n?/gm,"\n");null!=(n=_.exec(o));){const e=n[1];let o=n[2]||"";o=o.trim();const r=o[0];o=o.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(o=o.replace(/\\n/g,"\n"),o=o.replace(/\\r/g,"\r")),t[e]=o}return t},populate:function(e,t,n={}){const o=Boolean(n&&n.debug),r=Boolean(n&&n.override);if("object"!=typeof t){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(const n of Object.keys(t))Object.prototype.hasOwnProperty.call(e,n)?(!0===r&&(e[n]=t[n]),o&&y(!0===r?`"${n}" is already defined and WAS overwritten`:`"${n}" is already defined and was NOT overwritten`)):e[n]=t[n]}};u.exports.configDotenv=V.configDotenv,u.exports._configVault=V._configVault,u.exports._parseVault=V._parseVault;var O=u.exports.config=V.config,w=u.exports.decrypt=V.decrypt,I=u.exports.parse=V.parse;function T(e){return e.replace(/\\\$/g,"$")}function x(e,t,n){const o={...n,...t},r=/(?<!\\)\${([^{}]+)}|(?<!\\)\$([A-Za-z_][A-Za-z0-9_]*)/g;let s,a=e;const c=new Set;for(;null!==(s=r.exec(a));){c.add(a);const[e,t,i]=s,p=t||i,l=/(:\+|\+|:-|-)/,u=p.match(l),d=u?u[0]:null,f=p.split(d);let v,g;const E=f.shift();if([":+","+"].includes(d)?(v=o[E]?f.join(d):"",g=null):(v=f.join(d),g=o[E]),a=g?c.has(g)?a.replace(e,v):a.replace(e,g):a.replace(e,v),a===n[E])break;r.lastIndex=0}return a}u.exports.populate=V.populate,u.exports=V;var A=function(e){const t={};let n=process.env;e&&null!=e.processEnv&&(n=e.processEnv);for(const o in e.parsed){let r=e.parsed[o];r=n[o]&&n[o]!==r?n[o]:x(r,n,t),e.parsed[o]=T(r),t[o]=T(r)}for(const t in e.parsed)n[t]=e.parsed[t];return e};const j=/(?<content>.*)::(?<type>\w*)$/,$=(e,t={})=>{if(!j.test(e))return e;const{type:n,content:o}=j.exec(e).groups;switch(n){case"number":case"int":case"float":return+o;case"bool":let r;try{r=JSON.parse(o)}catch(e){}return!!r;case"json":let s;try{s=JSON.parse(o)}catch(e){}return s;case"date":return new Date(o);default:return t&&t[n]?t[n](o):e}},Y=(e,t={})=>{if(!e&&"object"==typeof process&&process?.env&&(e=process.env),"object"!=typeof e)return{};let n={};for(const o in e)n[o]=$(e[o],t);return n},k=(e={},t={},n=null)=>{const o="object"==typeof process&&process?.env?{...process.env}:{};"undefined"!=typeof SOURCE_PATH&&(n=SOURCE_PATH),n||(n=process.cwd());const r=a.default.resolve(n,".env.default"),s=a.default.resolve(n,`.env.${process.env.BASE_CONFIG_ENV||process.env.CONFIG_ENV||"development"}`),c=A(O({path:r})),i=A(O({path:s,...e})),p={...o,...c.parsed,...i?.parsed};return Y(p,t)};var R={config:O,decrypt:w,parse:I,expand:A,load:k,convert:$,convertall:Y};exports.config=O,exports.convert=$,exports.convertall=Y,exports.decrypt=w,exports.default=R,exports.expand=A,exports.load=k,exports.parse=I;
